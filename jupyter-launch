#!/usr/bin/env bash

OUTPUT_FILE=$(mktemp) || exit 1

pid1=""
pid2=""

cleanup() {
  echo 'Cleaning up...'
  if [[ -f "$OUTPUT_FILE" ]]; then
    rm "$OUTPUT_FILE"
  fi
  if [[ -n "$pid1" ]] && [[ -n "$(ps -q $pid1 -o comm=)" ]]; then
    kill -9 "$pid1"
  fi
  if [[ -n "$pid2" ]] && [[ -n "$(ps -q $pid2 -o comm=)" ]]; then
    kill -9 "$pid2"
  fi
}

# Based on http://linuxcommand.org/lc3_wss0140.php
# and https://codeinthehole.com/tips/bash-error-reporting/
PROGNAME=$(basename "$0")
error_exit() {
#	----------------------------------------------------------------
#	Function for exit due to fatal program error
#		Accepts 1 argument:
#			string containing descriptive error message
#	----------------------------------------------------------------


  #echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
  if [ ! "$1" ]; then
    echo "${PROGNAME}: Unknown Error" 1>&2
    read -r line file <<<"$(caller)"
    echo "An error occurred in line $line of file $file:" 1>&2
    sed "${line}q;d" "$file" 1>&2
  else
    echo "${PROGNAME}: $1" 1>&2
  fi

  # TODO: should this be in here? Won't it run anyway this line below?
  #       trap cleanup EXIT INT QUIT TERM
  cleanup
  exit 1
}

trap error_exit ERR
trap cleanup EXIT INT QUIT TERM

# NOTE: TARGET_DIR cannot start with "~", but it can be relative to remote $HOME.
TARGET_DIR=$1

if [[ -z "$TARGET_DIR" ]]; then
  # If session is remote, don't open browser
  # from https://unix.stackexchange.com/a/9607
  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    SESSION_TYPE=remote/ssh
  else
    case $(ps -o comm= -p $PPID) in
    sshd | */sshd) SESSION_TYPE=remote/ssh ;;
    esac
  fi
  if [ "$SESSION_TYPE" == "remote/ssh" ]; then
    error_exit "Target directory required: jupyter-launch-remote <target_dir>, e.g., jupyter-launch-remote code/tool-wikipathways2wiki"
  else
    echo "Launching locally..."
    jupyter notebook --port=8888 --notebook-dir ./
  fi
else
  nohup ssh nixos.gladstone.internal -tt "cd $TARGET_DIR && nix-shell shell-jupyter-launch.nix || exit 1" > "$OUTPUT_FILE" &
  pid1=$!
  sleep 3

  nohup ssh -N -L 8888:localhost:8888 nixos.gladstone.internal > /dev/null &
  pid2=$!
  sleep 3
  url="$(grep '^\s*http' \""$OUTPUT_FILE"\" | head -n 1 | sed 's/^ *http/http/')"
  if [[ -z "$url" ]]; then
    echo 'Waiting for jupyter notebook to launch (1/3)...'
    sleep 3
  fi

  url="$(grep '^\s*http' \""$OUTPUT_FILE"\" | head -n 1 | sed 's/^ *http/http/')"
  if [[ -z "$url" ]]; then
    echo 'Waiting for jupyter notebook to launch (2/3)...'
    sleep 3
  fi

  url="$(grep '^\s*http' \""$OUTPUT_FILE"\" | head -n 1 | sed 's/^ *http/http/')"
  if [[ -z "$url" ]]; then
    echo 'Waiting for jupyter notebook to launch (3/3)...'
    sleep 3
  fi

  url="$(grep '^\s*http' \""$OUTPUT_FILE"\" | head -n 1 | sed 's/^ *http/http/')"
  if [[ -z "$url" ]]; then
    error_exit "No notebook URL found"
  fi

  open "$url"

  if [[ -f "$OUTPUT_FILE" ]]; then
    rm "$OUTPUT_FILE"
  fi

  read -rp "To quit, hit Enter"
fi
